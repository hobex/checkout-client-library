<?php

/**
 * Test class for WirecardCEE_Client_Stdlib_Exception.
 * Generated by PHPUnit on 2011-06-24 at 13:25:52.
 */
class WirecardCEE_Stdlib_Exception_InvalidFormatExceptionTest extends PHPUnit_Framework_TestCase {

    /**
     * @var WirecardCEE_Stdlib_Exception_InvalidFormatException
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new WirecardCEE_Stdlib_Exception_InvalidFormatException('objectMessage', 666);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    public function testThrowExceptionWithoutData() {
        try
        {
            throw new WirecardCEE_Stdlib_Exception_InvalidFormatException();
        }
        catch (WirecardCEE_Stdlib_Exception_InvalidFormatException $e)
        {
            $this->assertEquals('', $e->getMessage());
            $this->assertEquals(0, $e->getCode());
            $this->assertEquals('', $e->getPrevious());
        }
    }
    
    public function testThrowExceptionWithData() {
        try
        {
            throw new WirecardCEE_Stdlib_Exception_InvalidFormatException('message', 1234);
        }
        catch (WirecardCEE_Stdlib_Exception_InvalidFormatException $e)
        {
            $this->assertEquals('message', $e->getMessage());
            $this->assertEquals(1234, $e->getCode());
            $this->assertEquals('', $e->getPrevious());
        }
    }
    
    public function getThrowExceptionWithPrevious() {
        try
        {
            throw new WirecardCEE_Stdlib_Exception_InvalidFormatException('message', 111, $this->object);
        }
        catch (WirecardCEE_Stdlib_Exception_InvalidFormatException $e)
        {
            $this->assertEquals('message', $e->getMessage());
            $this->assertEquals(1234, $e->getCode());
            $this->assertEquals($this->object, $e->getPrevious());
        }
    }
}

?>
